{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Web\\\\sem2\\\\weather\\\\src\\\\components\\\\App\\\\App.js\";\nimport React from 'react';\nimport Weather from '../Weather/Weather';\nimport Cities from '../Cities/Cities';\nimport { connect } from \"react-redux\";\nimport { setCoords, fetchGeolocationError } from '../../actions/geolocationAction';\nimport { gethWeatherByCoords } from '../../fetch/getWeatherByCoords';\nimport Loader from '../Loader/Loader';\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.getGeolocation();\n  }\n\n  render() {\n    let weatherBlock = this.setWeatherBlock();\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"headerText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"Weather here\"), React.createElement(\"button\", {\n      className: \"headerButton\",\n      onClick: this.getGeolocation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"Update Geolocation\")), weatherBlock, React.createElement(Cities, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }));\n  }\n\n  getGeolocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.props.setCoords({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        });\n        this.props.getWeatherByCoords(this.props.coords);\n      }, () => {\n        this.props.setCoords({\n          lat: 51.51,\n          lon: -0.13\n        });\n        this.props.getWeatherByCoords(this.props.coords);\n        alert('Permission denied. Load weather from default coordinates');\n      });\n    } else {\n      this.props.fetchGeolocationError('your browser does not support geolocation');\n    }\n  }\n\n  setWeatherBlock() {\n    let weatherBlock = null;\n\n    if (this.props.forecast) {\n      weatherBlock = React.createElement(Weather, {\n        data: this.props.forecast,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      });\n    } else if (this.props.error) {\n      weatherBlock = React.createElement(\"div\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Error: \", this.props.error);\n    } else if (!this.props.forecast && !this.props.error) {\n      weatherBlock = React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      });\n    }\n\n    return weatherBlock;\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    coords: state.geolocation.coords,\n    forecast: state.geolocation.forecast,\n    error: state.geolocation.error\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setCoords: coords => {\n      dispatch(setCoords(coords));\n    },\n    getWeatherByCoords: coords => {\n      dispatch(getWeatherByCoords(coords));\n    },\n    fetchGeolocationError: error => {\n      dispatch(fetchGeolocationError(error));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["D:/Study/Web/sem2/weather/src/components/App/App.js"],"names":["React","Weather","Cities","connect","setCoords","fetchGeolocationError","gethWeatherByCoords","Loader","App","Component","componentDidMount","getGeolocation","render","weatherBlock","setWeatherBlock","navigator","geolocation","getCurrentPosition","position","props","lat","coords","latitude","lon","longitude","getWeatherByCoords","alert","forecast","error","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Weather from '../Weather/Weather'\r\nimport Cities from '../Cities/Cities'\r\nimport { connect } from \"react-redux\";\r\nimport { setCoords, fetchGeolocationError } from '../../actions/geolocationAction';\r\nimport { gethWeatherByCoords } from '../../fetch/getWeatherByCoords';\r\nimport Loader from '../Loader/Loader'\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    this.getGeolocation();\r\n  }\r\n\r\n  render() {\r\n    let weatherBlock = this.setWeatherBlock();\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"header\">\r\n          <div className=\"headerText\">Weather here</div>\r\n          <button className=\"headerButton\" onClick={this.getGeolocation}>Update Geolocation</button>\r\n        </div>\r\n        {weatherBlock}\r\n        <Cities/>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getGeolocation() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.props.setCoords({lat: position.coords.latitude, lon: position.coords.longitude});\r\n        this.props.getWeatherByCoords(this.props.coords);\r\n      },\r\n      () => {\r\n        this.props.setCoords({lat: 51.51, lon: -0.13});\r\n        this.props.getWeatherByCoords(this.props.coords);\r\n        alert('Permission denied. Load weather from default coordinates');\r\n      });\r\n    } else {\r\n      this.props.fetchGeolocationError('your browser does not support geolocation');\r\n    }\r\n  }\r\n\r\n  setWeatherBlock ()  {\r\n    let weatherBlock = null;\r\n    if(this.props.forecast) {\r\n      weatherBlock = <Weather data={this.props.forecast}/>;\r\n    } else if (this.props.error){\r\n      weatherBlock = <div className=\"error\">Error: {this.props.error}</div>;\r\n    } else if (!this.props.forecast && !this.props.error) {\r\n      weatherBlock = <Loader/>\r\n    }\r\n    return weatherBlock;\r\n  }\r\n\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\nreturn {\r\n  coords: state.geolocation.coords,\r\n  forecast: state.geolocation.forecast,\r\n  error: state.geolocation.error\r\n};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\nreturn {\r\n  setCoords: (coords) => {\r\n    dispatch(setCoords(coords));\r\n  },\r\n\r\n  getWeatherByCoords: (coords) => {\r\n    dispatch(getWeatherByCoords(coords));\r\n  },\r\n\r\n  fetchGeolocationError: (error) => {\r\n    dispatch(fetchGeolocationError(error));\r\n  }\r\n};\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n"]},"metadata":{},"sourceType":"module"}