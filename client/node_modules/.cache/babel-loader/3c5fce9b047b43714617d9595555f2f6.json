{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Jully\\\\ClientServerWeather\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport getCitiesFromStorage from \"../index\";\nexport default function citiesReducer(currentState = {\n  cities: getCitiesFromStorage()\n}, action) {\n  const cities = new Map();\n  axios.get('favourites').then(response => {\n    const cities = response.data.map(city => ({\n      id: city._id,\n      name: city.name\n    }));\n  });\n\n  let state = _objectSpread({}, currentState, {\n    error: false,\n    cities: new Map(cities)\n  });\n\n  switch (action.type) {\n    case 'ADD_CITY':\n      if (!state.cities.has(action.payload)) state.cities.set(action.payload);\n      break;\n\n    case 'DELETE_CITY':\n      state.cities.delete(action.payload);\n      break;\n\n    case 'FETCH_ADDED_CITY_SUCCESS':\n      state.cities.delete(action.payload.city);\n      state.cities.set(action.payload.response.name, action.payload.response);\n      break;\n\n    case 'FETCH_ADDED_CITY_ERROR':\n      state.error = action.payload.error;\n      state.cities.delete(action.payload.city);\n      break;\n\n    default:\n      break;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["C:/Users/Jully/ClientServerWeather/client/src/reducers/сitiesReducer.js"],"names":["getCitiesFromStorage","citiesReducer","currentState","cities","action","Map","axios","get","then","response","data","map","city","id","_id","name","state","error","type","has","payload","set","delete"],"mappings":";;;;;;AAAA,OAAOA,oBAAP,MAAiC,UAAjC;AAEA,eAAe,SAASC,aAAT,CAAuBC,YAAY,GAAG;AAACC,EAAAA,MAAM,EAAEH,oBAAoB;AAA7B,CAAtC,EAAwEI,MAAxE,EAAgF;AAE7F,QAAMD,MAAM,GAAG,IAAIE,GAAJ,EAAf;AACAC,EAAAA,KAAK,CACFC,GADH,CACO,YADP,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,UAAMN,MAAM,GAAGM,QAAQ,CAACC,IAAT,CAAcC,GAAd,CACbC,IAAI,KAAK;AACPC,MAAAA,EAAE,EAAED,IAAI,CAACE,GADF;AAEPC,MAAAA,IAAI,EAAEH,IAAI,CAACG;AAFJ,KAAL,CADS,CAAf;AAKD,GARH;;AAUA,MAAIC,KAAK,qBACJd,YADI;AAEPe,IAAAA,KAAK,EAAE,KAFA;AAGPd,IAAAA,MAAM,EAAE,IAAIE,GAAJ,CAAQF,MAAR;AAHD,IAAT;;AAMA,UAAQC,MAAM,CAACc,IAAf;AACE,SAAK,UAAL;AACE,UAAI,CAACF,KAAK,CAACb,MAAN,CAAagB,GAAb,CAAiBf,MAAM,CAACgB,OAAxB,CAAL,EACEJ,KAAK,CAACb,MAAN,CAAakB,GAAb,CAAiBjB,MAAM,CAACgB,OAAxB;AACF;;AACF,SAAK,aAAL;AACEJ,MAAAA,KAAK,CAACb,MAAN,CAAamB,MAAb,CAAoBlB,MAAM,CAACgB,OAA3B;AACA;;AACF,SAAK,0BAAL;AACEJ,MAAAA,KAAK,CAACb,MAAN,CAAamB,MAAb,CAAoBlB,MAAM,CAACgB,OAAP,CAAeR,IAAnC;AACAI,MAAAA,KAAK,CAACb,MAAN,CAAakB,GAAb,CAAiBjB,MAAM,CAACgB,OAAP,CAAeX,QAAf,CAAwBM,IAAzC,EAA+CX,MAAM,CAACgB,OAAP,CAAeX,QAA9D;AACA;;AACF,SAAK,wBAAL;AACEO,MAAAA,KAAK,CAACC,KAAN,GAAcb,MAAM,CAACgB,OAAP,CAAeH,KAA7B;AACAD,MAAAA,KAAK,CAACb,MAAN,CAAamB,MAAb,CAAoBlB,MAAM,CAACgB,OAAP,CAAeR,IAAnC;AACA;;AACF;AACE;AAjBJ;;AAmBA,SAAOI,KAAP;AACD","sourcesContent":["import getCitiesFromStorage from \"../index\";\r\n\r\nexport default function citiesReducer(currentState = {cities: getCitiesFromStorage()}, action) {\r\n\r\n  const cities = new Map();\r\n  axios\r\n    .get('favourites')\r\n    .then(response => {\r\n      const cities = response.data.map(\r\n        city => ({\r\n          id: city._id,\r\n          name: city.name\r\n        }));\r\n    });\r\n\r\n  let state = {\r\n    ...currentState,\r\n    error: false,\r\n    cities: new Map(cities)\r\n  };\r\n\r\n  switch (action.type) {\r\n    case 'ADD_CITY':\r\n      if (!state.cities.has(action.payload))\r\n        state.cities.set(action.payload);\r\n      break;\r\n    case 'DELETE_CITY':\r\n      state.cities.delete(action.payload);\r\n      break;\r\n    case 'FETCH_ADDED_CITY_SUCCESS':\r\n      state.cities.delete(action.payload.city);\r\n      state.cities.set(action.payload.response.name, action.payload.response);\r\n      break;\r\n    case 'FETCH_ADDED_CITY_ERROR':\r\n      state.error = action.payload.error;\r\n      state.cities.delete(action.payload.city);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return state;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}