{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Web\\\\sem2\\\\weather\\\\src\\\\components\\\\App\\\\App.js\";\nimport React from 'react';\nimport Weather from '../Weather/Weather';\nimport Cities from '../Cities/Cities';\nimport { connect } from \"react-redux\";\nimport { setCoords, fetchGeolocationError } from '../../actions/geoAction';\nimport { getWeatherByCoords } from '../../fetch/getWeatherByCoords';\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.getGeolocation();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"\\u041F\\u043E\\u0433\\u043E\\u0434\\u0430 \\u0437\\u0434\\u0435\\u0441\\u044C\"), React.createElement(\"button\", {\n      className: \"headerButton\",\n      onClick: this.getGeolocation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u043C\\u0435\\u0441\\u0442\\u043E\\u043F\\u043E\\u043B\\u043E\\u0436\\u0435\\u043D\\u0438\\u0435\")), this.props.forecast && React.createElement(Weather, {\n      weather: this.props.forecast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }), this.props.error && React.createElement(\"div\", {\n      className: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"Error: \", this.props.error), !this.props.forecast && !this.props.error && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"), React.createElement(Cities, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }));\n  }\n\n  getGeolocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.props.setCoords({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        });\n        this.props.getWeatherByCoords(this.props.coords);\n      }, () => {\n        this.props.setCoords({\n          lat: 51.51,\n          lon: -0.13\n        });\n        this.props.getWeatherByCoords(this.props.coords);\n        alert('Permission denied. Load weather from default coordinates');\n      });\n    } else {\n      this.props.fetchGeolocationError('your browser does not support geolocation');\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    coords: state.geolocation.coords,\n    forecast: state.geolocation.forecast,\n    error: state.geolocation.error\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setCoords: coords => {\n      dispatch(setCoords(coords));\n    },\n    getWeatherByCoords: coords => {\n      dispatch(getWeatherByCoords(coords));\n    },\n    fetchGeolocationError: error => {\n      dispatch(fetchGeolocationError(error));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["D:/Study/Web/sem2/weather/src/components/App/App.js"],"names":["React","Weather","Cities","connect","setCoords","fetchGeolocationError","getWeatherByCoords","App","Component","componentDidMount","getGeolocation","render","props","forecast","error","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","alert","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Weather from '../Weather/Weather'\r\nimport Cities from '../Cities/Cities'\r\nimport { connect } from \"react-redux\";\r\nimport { setCoords, fetchGeolocationError } from '../../actions/geoAction';\r\nimport { getWeatherByCoords } from '../../fetch/getWeatherByCoords';\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    this.getGeolocation();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div>\r\n          <div>Погода здесь</div>\r\n          <button className=\"headerButton\" onClick={this.getGeolocation}>Обновить местоположение</button>\r\n        </div>\r\n        {this.props.forecast && <Weather weather={this.props.forecast}/>}\r\n        {this.props.error && <div className=\"error\">Error: {this.props.error}</div>}\r\n        {!this.props.forecast && !this.props.error && <div>Загрузка...</div>}\r\n        <Cities/>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getGeolocation() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.props.setCoords({lat: position.coords.latitude, lon: position.coords.longitude});\r\n        this.props.getWeatherByCoords(this.props.coords);\r\n      },\r\n      () => {\r\n        this.props.setCoords({lat: 51.51, lon: -0.13});\r\n        this.props.getWeatherByCoords(this.props.coords);\r\n        alert('Permission denied. Load weather from default coordinates');\r\n      });\r\n    } else {\r\n      this.props.fetchGeolocationError('your browser does not support geolocation');\r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\nreturn {\r\n  coords: state.geolocation.coords,\r\n  forecast: state.geolocation.forecast,\r\n  error: state.geolocation.error\r\n};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\nreturn {\r\n  setCoords: (coords) => {\r\n    dispatch(setCoords(coords));\r\n  },\r\n\r\n  getWeatherByCoords: (coords) => {\r\n    dispatch(getWeatherByCoords(coords));\r\n  },\r\n\r\n  fetchGeolocationError: (error) => {\r\n    dispatch(fetchGeolocationError(error));\r\n  }\r\n};\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n"]},"metadata":{},"sourceType":"module"}