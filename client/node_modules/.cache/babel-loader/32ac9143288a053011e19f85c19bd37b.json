{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jully\\\\ClientServerWeather\\\\client\\\\src\\\\components\\\\Cities\\\\Cities.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport Weather from '../Weather/Weather';\nimport axios from 'axios';\nimport { getCity, addCity, deleteCity, getWeatherByCity } from '../../actions/сitiesAction';\nimport getCitiesFromStorage from '../../index';\nimport './Cities.css';\n\nclass Cities extends React.Component {\n  componentDidMount() {\n    this.props.getCity();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"fav_cities\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"\\u0418\\u0437\\u0431\\u0440\\u0430\\u043D\\u043D\\u043E\\u0435\"), React.createElement(\"form\", {\n      onSubmit: e => this.addNewCity(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"city_input\",\n      type: \"text\",\n      name: \"city\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"city_button\",\n      type: \"submit\",\n      value: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }))), this.props.error && React.createElement(\"div\", {\n      className: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"Error: \", this.props.error), React.createElement(\"div\", {\n      className: \"weather\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, [...this.props.cities.entries()].map(entry => {\n      console.log(entry[1].weather);\n      return React.createElement(Weather, {\n        weather: entry[1].weather,\n        key: entry[1].id,\n        getWeather: () => this.props.getWeatherByCity(entry[1].id, entry[1].name),\n        onDelete: () => this.props.deleteCity(entry[1].id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      });\n    })));\n  }\n\n  addNewCity(e) {\n    e.preventDefault();\n    this.props.addCity(e.currentTarget.elements.city.value);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    cities: state.fav_cities.cities,\n    error: state.fav_cities.error\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getCity: () => {\n      dispatch(getCities());\n    },\n    addCity: name => {\n      dispatch(addCityStore(name));\n    },\n    deleteCity: id => {\n      dispatch(deleteCityStore(id));\n    },\n    getWeatherByCity: (id, name) => {\n      dispatch(getWeatherByCity(id, name));\n    }\n  };\n}\n\nconst addCityStore = name => {\n  return dispatch => {\n    axios.post('favourites', {\n      name\n    }).then(response => {\n      const city = {\n        id: response.data._id,\n        name: response.data.name\n      };\n      dispatch(addCity(city.id, city.name));\n    });\n  };\n};\n\nconst deleteCityStore = id => {\n  return dispatch => {\n    if (this.props.cities) axios.delete('favourites/' + id).then(response => {\n      dispatch(deleteCity(id));\n    });\n  };\n};\n\nconst getCities = () => {\n  return dispatch => {\n    axios.get('favourites').then(response => {\n      const cities = response.data.map(city => ({\n        id: city._id,\n        name: city.name\n      }));\n      dispatch(getCity(cities));\n    });\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cities);","map":{"version":3,"sources":["C:/Users/Jully/ClientServerWeather/client/src/components/Cities/Cities.js"],"names":["React","connect","Weather","axios","getCity","addCity","deleteCity","getWeatherByCity","getCitiesFromStorage","Cities","Component","componentDidMount","props","render","e","addNewCity","error","cities","entries","map","entry","console","log","weather","id","name","preventDefault","currentTarget","elements","city","value","mapStateToProps","state","fav_cities","mapDispatchToProps","dispatch","getCities","addCityStore","deleteCityStore","post","then","response","data","_id","delete","get"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Weather from '../Weather/Weather';\r\nimport axios from 'axios';\r\nimport { getCity, addCity, deleteCity, getWeatherByCity } from '../../actions/сitiesAction';\r\nimport getCitiesFromStorage from '../../index';\r\nimport './Cities.css';\r\n\r\nclass Cities extends React.Component {\r\n\r\ncomponentDidMount(){\r\n  this.props.getCity();\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <div>\r\n        <div className=\"fav_cities\">Избранное</div>\r\n        <form onSubmit={(e) => this.addNewCity(e)}>\r\n          <input className=\"city_input\" type=\"text\" name=\"city\" required />\r\n          <input className=\"city_button\" type=\"submit\" value=\"Добавить\"/>\r\n        </form>\r\n      </div >\r\n        {this.props.error && <div className=\"error\">Error: {this.props.error}</div>}\r\n\r\n        <div  className=\"weather\">\r\n                  {\r\n                    [...this.props.cities.entries()].map((entry) => {\r\n                      console.log(entry[1].weather);\r\n                      return (\r\n                        <Weather\r\n                        weather={entry[1].weather}\r\n                        key={entry[1].id}\r\n                        getWeather={() => this.props.getWeatherByCity(entry[1].id, entry[1].name)}\r\n                        onDelete={() => this.props.deleteCity(entry[1].id)} />\r\n                      );\r\n                    })\r\n                  }\r\n                </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  addNewCity(e) {\r\n    e.preventDefault();\r\n    this.props.addCity(e.currentTarget.elements.city.value);\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    cities: state.fav_cities.cities,\r\n    error: state.fav_cities.error\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    getCity: () => {\r\n      dispatch(getCities());\r\n    },\r\n\r\n    addCity: (name) => {\r\n      dispatch(addCityStore(name));\r\n    },\r\n\r\n    deleteCity: (id) => {\r\n      dispatch(deleteCityStore(id));\r\n    },\r\n\r\n    getWeatherByCity: (id, name) => {\r\n      dispatch(getWeatherByCity(id, name));\r\n    }\r\n  };\r\n}\r\n\r\nconst addCityStore = name => {\r\n  return dispatch => {\r\n    axios\r\n      .post('favourites', { name })\r\n      .then(response => {\r\n        const city = {\r\n          id: response.data._id,\r\n          name: response.data.name\r\n        };\r\n      dispatch(addCity(city.id, city.name));\r\n    });\r\n  };\r\n};\r\n\r\nconst deleteCityStore = id => {\r\n  return dispatch => {\r\n    if (this.props.cities)\r\n    axios\r\n      .delete('favourites/' + id)\r\n      .then(response => {\r\n        dispatch(deleteCity(id))\r\n      })\r\n  }\r\n}\r\n\r\nconst getCities = () => {\r\n  return dispatch => {\r\n    axios\r\n      .get('favourites')\r\n      .then(response => {\r\n        const cities = response.data.map(city => ({ id: city._id, name: city.name }));\r\n        dispatch(getCity(cities));\r\n      })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cities);\r\n"]},"metadata":{},"sourceType":"module"}