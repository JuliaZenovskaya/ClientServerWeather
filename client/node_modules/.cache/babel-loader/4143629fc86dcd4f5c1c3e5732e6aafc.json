{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jully\\\\weather\\\\src\\\\components\\\\App\\\\App.js\";\nimport React from 'react';\nimport Weather from '../Weather/Weather';\nimport Cities from '../Cities/Cities';\nimport { connect } from \"react-redux\";\nimport { setCoords, getErrorResponse, getWeatherByCoords, setTrue } from '../../actions/geoAction';\nimport './App.css';\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.getGeolocation();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header_text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"\\u041F\\u043E\\u0433\\u043E\\u0434\\u0430 \\u0437\\u0434\\u0435\\u0441\\u044C\"), React.createElement(\"button\", {\n      className: \"header_button\",\n      onClick: this.getGeolocation.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u043C\\u0435\\u0441\\u0442\\u043E\\u043F\\u043E\\u043B\\u043E\\u0436\\u0435\\u043D\\u0438\\u0435\")), React.createElement(\"div\", {\n      className: \"geo_weather\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, this.props.weather && React.createElement(Weather, {\n      weather: this.props.weather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }), this.props.error && React.createElement(\"div\", {\n      className: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"Error: \", this.props.error), (this.props.isloading || !this.props.weather && !this.props.error) && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\")), React.createElement(Cities, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }));\n  }\n\n  getGeolocation() {\n    let temp = 'true';\n    this.props.isloading.setTrue(temp);\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.props.setCoords({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        });\n        this.props.getWeatherByCoords(this.props.coords);\n      }, () => {\n        this.props.setCoords({\n          lat: 59.94,\n          lon: 30.32\n        });\n        this.props.getWeatherByCoords(this.props.coords);\n      });\n    } else {\n      this.props.getErrorResponse('your browser does not support geolocation');\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    coords: state.geo.coords,\n    weather: state.geo.weather,\n    error: state.geo.error,\n    isloading: state.geo.isloading\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setCoords: coords => {\n      dispatch(setCoords(coords));\n    },\n    setTrue: tr => {\n      dispatch(setTrue(tr));\n    },\n    getWeatherByCoords: coords => {\n      dispatch(getWeatherByCoords(coords));\n    },\n    getErrorResponse: error => {\n      dispatch(getErrorResponse(error));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:/Users/Jully/weather/src/components/App/App.js"],"names":["React","Weather","Cities","connect","setCoords","getErrorResponse","getWeatherByCoords","setTrue","App","Component","componentDidMount","getGeolocation","render","bind","props","weather","error","isloading","temp","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","mapStateToProps","state","geo","mapDispatchToProps","dispatch","tr"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Weather from '../Weather/Weather'\r\nimport Cities from '../Cities/Cities'\r\nimport { connect } from \"react-redux\";\r\nimport { setCoords, getErrorResponse, getWeatherByCoords, setTrue } from '../../actions/geoAction';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    this.getGeolocation();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div>\r\n          <div className='header_text'>Погода здесь</div>\r\n          <button className='header_button' onClick={this.getGeolocation.bind(this)}>Обновить местоположение</button>\r\n        </div>\r\n        <div className='geo_weather'>\r\n        {this.props.weather && <Weather weather={this.props.weather}/>}\r\n        {this.props.error && <div className='error'>Error: {this.props.error}</div>}\r\n        {(this.props.isloading || !this.props.weather && !this.props.error) && <div>Загрузка...</div>}\r\n        </div>\r\n        <Cities/>\r\n      </div>\r\n    );\r\n  }\r\n\r\n   getGeolocation() {\r\n     let temp = 'true';\r\n    this.props.isloading.setTrue(temp);\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.props.setCoords({lat: position.coords.latitude, lon: position.coords.longitude});\r\n        this.props.getWeatherByCoords(this.props.coords);\r\n      },\r\n      () => {\r\n        this.props.setCoords({lat: 59.94, lon: 30.32});\r\n        this.props.getWeatherByCoords(this.props.coords);\r\n      });\r\n    } else {\r\n      this.props.getErrorResponse('your browser does not support geolocation');\r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\nreturn {\r\n  coords: state.geo.coords,\r\n  weather: state.geo.weather,\r\n  error: state.geo.error,\r\n  isloading: state.geo.isloading\r\n};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\nreturn {\r\n  setCoords: (coords) => {\r\n    dispatch(setCoords(coords));\r\n  },\r\n\r\n  setTrue: (tr) => {\r\n    dispatch(setTrue(tr));\r\n  },\r\n\r\n  getWeatherByCoords: (coords) => {\r\n    dispatch(getWeatherByCoords(coords));\r\n  },\r\n\r\n  getErrorResponse: (error) => {\r\n    dispatch(getErrorResponse(error));\r\n  }\r\n};\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n"]},"metadata":{},"sourceType":"module"}