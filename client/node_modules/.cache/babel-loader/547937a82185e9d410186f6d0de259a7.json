{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jully\\\\weather\\\\src\\\\components\\\\App\\\\App.js\";\nimport React from 'react';\nimport Weather from '../Weather/Weather';\nimport Cities from '../Cities/Cities';\nimport { connect } from \"react-redux\";\nimport { setCoords, getErrorResponse, getWeatherByCoords } from '../../actions/geoAction';\nimport './App.css';\nlet lock = true;\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.getGeolocation();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header_text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"\\u041F\\u043E\\u0433\\u043E\\u0434\\u0430 \\u0437\\u0434\\u0435\\u0441\\u044C\"), React.createElement(\"button\", {\n      className: \"header_button\",\n      onClick: this.getGeolocation.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u043C\\u0435\\u0441\\u0442\\u043E\\u043F\\u043E\\u043B\\u043E\\u0436\\u0435\\u043D\\u0438\\u0435\")), React.createElement(\"div\", {\n      className: \"geo_weather\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, this.props.weather && React.createElement(Weather, {\n      weather: this.props.weather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }), this.props.error && React.createElement(\"div\", {\n      className: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"Error: \", this.props.error), !this.props.weather && !this.props.error && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"), this.props.getWeatherByCoords(this.props.coords) == this.coords && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\")), React.createElement(Cities, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }));\n  }\n\n  getGeolocation() {\n    lock = false;\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.props.setCoords({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        });\n        this.props.getWeatherByCoords(this.props.coords);\n      }, () => {\n        this.props.setCoords({\n          lat: 59.94,\n          lon: 30.32\n        });\n        this.props.getWeatherByCoords(this.props.coords);\n      });\n    } else {\n      this.props.getErrorResponse('your browser does not support geolocation');\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    coords: state.geo.coords,\n    weather: state.geo.weather,\n    error: state.geo.error\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setCoords: coords => {\n      dispatch(setCoords(coords));\n    },\n    getWeatherByCoords: coords => {\n      dispatch(getWeatherByCoords(coords));\n    },\n    getErrorResponse: error => {\n      dispatch(getErrorResponse(error));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:/Users/Jully/weather/src/components/App/App.js"],"names":["React","Weather","Cities","connect","setCoords","getErrorResponse","getWeatherByCoords","lock","App","Component","componentDidMount","getGeolocation","render","bind","props","weather","error","coords","navigator","geolocation","getCurrentPosition","position","lat","latitude","lon","longitude","mapStateToProps","state","geo","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Weather from '../Weather/Weather'\r\nimport Cities from '../Cities/Cities'\r\nimport { connect } from \"react-redux\";\r\nimport { setCoords, getErrorResponse, getWeatherByCoords } from '../../actions/geoAction';\r\nimport './App.css';\r\nlet lock= true;\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n  componentDidMount() {\r\n    this.getGeolocation();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div>\r\n          <div className='header_text'>Погода здесь</div>\r\n          <button className='header_button' onClick={this.getGeolocation.bind(this)}>Обновить местоположение</button>\r\n        </div>\r\n        <div className='geo_weather'>\r\n        {this.props.weather && <Weather weather={this.props.weather}/>}\r\n        {this.props.error && <div className='error'>Error: {this.props.error}</div>}\r\n        {!this.props.weather && !this.props.error && <div>Загрузка...</div>}\r\n        {(this.props.getWeatherByCoords(this.props.coords) == this.coords) && <div>Загрузка...</div>}\r\n        </div>\r\n        <Cities/>\r\n      </div>\r\n    );\r\n  }\r\n\r\n   getGeolocation() {\r\n    lock = false;\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.props.setCoords({lat: position.coords.latitude, lon: position.coords.longitude});\r\n        this.props.getWeatherByCoords(this.props.coords);\r\n      },\r\n      () => {\r\n        this.props.setCoords({lat: 59.94, lon: 30.32});\r\n        this.props.getWeatherByCoords(this.props.coords);\r\n      });\r\n    } else {\r\n      this.props.getErrorResponse('your browser does not support geolocation');\r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\nreturn {\r\n  coords: state.geo.coords,\r\n  weather: state.geo.weather,\r\n  error: state.geo.error\r\n};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\nreturn {\r\n  setCoords: (coords) => {\r\n    dispatch(setCoords(coords));\r\n  },\r\n\r\n  getWeatherByCoords: (coords) => {\r\n    dispatch(getWeatherByCoords(coords));\r\n  },\r\n\r\n  getErrorResponse: (error) => {\r\n    dispatch(getErrorResponse(error));\r\n  }\r\n};\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n"]},"metadata":{},"sourceType":"module"}