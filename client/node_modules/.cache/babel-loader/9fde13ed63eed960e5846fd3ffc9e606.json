{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Jully\\\\ClientServerWeather\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getCitiesFromStore } from \"../index\";\nexport default function citiesReducer(currentState = {\n  cities: getCitiesFromStore()\n}, action) {\n  getCitiesFromStore().then(json => {\n    let state = _objectSpread({}, currentState, {\n      error: false,\n      cities: json.map(city => ({\n        id: json._id,\n        nane: json.name\n      }))\n    });\n\n    switch (action.type) {\n      case 'ADD_CITY':\n        if (!state.cities.has(action.payload)) state.cities.set(action.payload);\n        break;\n\n      case 'DELETE_CITY':\n        state.cities.delete(action.payload);\n        break;\n\n      case 'FETCH_ADDED_CITY_SUCCESS':\n        state.cities.delete(action.payload.city);\n        state.cities.set(action.payload.response.name, action.payload.response);\n        break;\n\n      case 'FETCH_ADDED_CITY_ERROR':\n        state.error = action.payload.error;\n        state.cities.delete(action.payload.city);\n        break;\n\n      default:\n        break;\n    }\n\n    return state;\n  });\n  return null;\n}","map":{"version":3,"sources":["C:/Users/Jully/ClientServerWeather/client/src/reducers/сitiesReducer.js"],"names":["getCitiesFromStore","citiesReducer","currentState","cities","action","then","json","state","error","map","city","id","_id","nane","name","type","has","payload","set","delete","response"],"mappings":";;;;;;AAAA,SAASA,kBAAT,QAAmC,UAAnC;AAEA,eAAe,SAASC,aAAT,CAAuBC,YAAY,GAAG;AAACC,EAAAA,MAAM,EAAEH,kBAAkB;AAA3B,CAAtC,EAAsEI,MAAtE,EAA8E;AAE7FJ,EAAAA,kBAAkB,GACfK,IADH,CACQC,IAAI,IAAI;AACd,QAAIC,KAAK,qBACJL,YADI;AAEPM,MAAAA,KAAK,EAAE,KAFA;AAGPL,MAAAA,MAAM,EAAEG,IAAI,CAACG,GAAL,CAASC,IAAI,KAClB;AAAEC,QAAAA,EAAE,EAAEL,IAAI,CAACM,GAAX;AAAgBC,QAAAA,IAAI,EAAEP,IAAI,CAACQ;AAA3B,OADkB,CAAb;AAHD,MAAT;;AAQA,YAAQV,MAAM,CAACW,IAAf;AACE,WAAK,UAAL;AACE,YAAI,CAACR,KAAK,CAACJ,MAAN,CAAaa,GAAb,CAAiBZ,MAAM,CAACa,OAAxB,CAAL,EACEV,KAAK,CAACJ,MAAN,CAAae,GAAb,CAAiBd,MAAM,CAACa,OAAxB;AACF;;AACF,WAAK,aAAL;AACEV,QAAAA,KAAK,CAACJ,MAAN,CAAagB,MAAb,CAAoBf,MAAM,CAACa,OAA3B;AACA;;AACF,WAAK,0BAAL;AACEV,QAAAA,KAAK,CAACJ,MAAN,CAAagB,MAAb,CAAoBf,MAAM,CAACa,OAAP,CAAeP,IAAnC;AACAH,QAAAA,KAAK,CAACJ,MAAN,CAAae,GAAb,CAAiBd,MAAM,CAACa,OAAP,CAAeG,QAAf,CAAwBN,IAAzC,EAA+CV,MAAM,CAACa,OAAP,CAAeG,QAA9D;AACA;;AACF,WAAK,wBAAL;AACEb,QAAAA,KAAK,CAACC,KAAN,GAAcJ,MAAM,CAACa,OAAP,CAAeT,KAA7B;AACAD,QAAAA,KAAK,CAACJ,MAAN,CAAagB,MAAb,CAAoBf,MAAM,CAACa,OAAP,CAAeP,IAAnC;AACA;;AACF;AACE;AAjBJ;;AAmBA,WAAOH,KAAP;AACD,GA9BD;AA+BA,SAAO,IAAP;AACC","sourcesContent":["import { getCitiesFromStore } from \"../index\";\r\n\r\nexport default function citiesReducer(currentState = {cities: getCitiesFromStore()}, action) {\r\n\r\ngetCitiesFromStore()\r\n  .then(json => {\r\n  let state = {\r\n    ...currentState,\r\n    error: false,\r\n    cities: json.map(city =>\r\n      ({ id: json._id, nane: json.name})\r\n    )\r\n  };\r\n\r\n  switch (action.type) {\r\n    case 'ADD_CITY':\r\n      if (!state.cities.has(action.payload))\r\n        state.cities.set(action.payload);\r\n      break;\r\n    case 'DELETE_CITY':\r\n      state.cities.delete(action.payload);\r\n      break;\r\n    case 'FETCH_ADDED_CITY_SUCCESS':\r\n      state.cities.delete(action.payload.city);\r\n      state.cities.set(action.payload.response.name, action.payload.response);\r\n      break;\r\n    case 'FETCH_ADDED_CITY_ERROR':\r\n      state.error = action.payload.error;\r\n      state.cities.delete(action.payload.city);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return state;\r\n})\r\nreturn null;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}