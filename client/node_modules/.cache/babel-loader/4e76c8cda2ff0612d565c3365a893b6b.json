{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Jully\\\\ClientServerWeather\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getCities } from \"../components/Cities/Cities\";\nexport default function citiesReducer(currentState = {\n  cities: [],\n  error: false\n}, action) {\n  console.log(currentState.cities);\n\n  let state = _objectSpread({}, currentState);\n\n  let newCities = [];\n\n  switch (action.type) {\n    case 'GET_CITY':\n      state = _objectSpread({}, state, {\n        cities: action.payload\n      });\n      break;\n\n    case 'ADD_CITY':\n      if (!state.cities.has(action.payload)) state.cities.set(action.payload);\n      break;\n\n    case 'DELETE_CITY':\n      newCities = state.cities.filter(city => city.id !== action.payload);\n      state = _objectSpread({}, state, {\n        cities: newCities\n      });\n      break;\n\n    case 'FETCH_ADDED_CITY_SUCCESS':\n      newCities = state.cities.filter(city => city.id !== action.payload);\n      state = _objectSpread({}, state, {\n        cities: newCities\n      });\n      newCities = [...state.cities, action.payload];\n      state = _objectSpread({}, state, {\n        cities: newCities\n      });\n      break;\n\n    case 'FETCH_ADDED_CITY_ERROR':\n      state = {\n        error: action.payload.error\n      };\n      newCities = state.cities.filter(city => city.id !== action.payload);\n      state = _objectSpread({}, state, {\n        cities: newCities\n      });\n      break;\n\n    default:\n      break;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["C:/Users/Jully/ClientServerWeather/client/src/reducers/сitiesReducer.js"],"names":["getCities","citiesReducer","currentState","cities","error","action","console","log","state","newCities","type","payload","has","set","filter","city","id"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,6BAA1B;AAEA,eAAe,SAASC,aAAT,CAAuBC,YAAY,GAAG;AAACC,EAAAA,MAAM,EAAE,EAAT;AAAaC,EAAAA,KAAK,EAAC;AAAnB,CAAtC,EAAiEC,MAAjE,EAAyE;AAExFC,EAAAA,OAAO,CAACC,GAAR,CAAYL,YAAY,CAACC,MAAzB;;AAEA,MAAIK,KAAK,qBACJN,YADI,CAAT;;AAIA,MAAIO,SAAS,GAAG,EAAhB;;AAEA,UAAQJ,MAAM,CAACK,IAAf;AACE,SAAK,UAAL;AACEF,MAAAA,KAAK,qBACAA,KADA;AAEHL,QAAAA,MAAM,EAAEE,MAAM,CAACM;AAFZ,QAAL;AAIA;;AACF,SAAK,UAAL;AACE,UAAI,CAACH,KAAK,CAACL,MAAN,CAAaS,GAAb,CAAiBP,MAAM,CAACM,OAAxB,CAAL,EACEH,KAAK,CAACL,MAAN,CAAaU,GAAb,CAAiBR,MAAM,CAACM,OAAxB;AACF;;AACF,SAAK,aAAL;AACEF,MAAAA,SAAS,GAAGD,KAAK,CAACL,MAAN,CAAaW,MAAb,CAAoBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYX,MAAM,CAACM,OAA/C,CAAZ;AACAH,MAAAA,KAAK,qBACAA,KADA;AAEHL,QAAAA,MAAM,EAAEM;AAFL,QAAL;AAIA;;AACF,SAAK,0BAAL;AACEA,MAAAA,SAAS,GAAGD,KAAK,CAACL,MAAN,CAAaW,MAAb,CAAoBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYX,MAAM,CAACM,OAA/C,CAAZ;AACAH,MAAAA,KAAK,qBACAA,KADA;AAEHL,QAAAA,MAAM,EAAEM;AAFL,QAAL;AAIAA,MAAAA,SAAS,GAAG,CAAC,GAAGD,KAAK,CAACL,MAAV,EAAkBE,MAAM,CAACM,OAAzB,CAAZ;AACAH,MAAAA,KAAK,qBACAA,KADA;AAEHL,QAAAA,MAAM,EAAEM;AAFL,QAAL;AAIA;;AACF,SAAK,wBAAL;AACED,MAAAA,KAAK,GAAG;AACNJ,QAAAA,KAAK,EAAEC,MAAM,CAACM,OAAP,CAAeP;AADhB,OAAR;AAGAK,MAAAA,SAAS,GAAGD,KAAK,CAACL,MAAN,CAAaW,MAAb,CAAoBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYX,MAAM,CAACM,OAA/C,CAAZ;AACAH,MAAAA,KAAK,qBACAA,KADA;AAEHL,QAAAA,MAAM,EAAEM;AAFL,QAAL;AAIA;;AACF;AACE;AAzCJ;;AA4CA,SAAOD,KAAP;AACC","sourcesContent":["import { getCities } from \"../components/Cities/Cities\";\r\n\r\nexport default function citiesReducer(currentState = {cities: [], error:false}, action) {\r\n\r\nconsole.log(currentState.cities);\r\n\r\nlet state = {\r\n  ...currentState\r\n};\r\n\r\nlet newCities = [];\r\n\r\nswitch (action.type) {\r\n  case 'GET_CITY':\r\n    state = {\r\n      ...state,\r\n      cities: action.payload\r\n    };\r\n    break;\r\n  case 'ADD_CITY':\r\n    if (!state.cities.has(action.payload))\r\n      state.cities.set(action.payload);\r\n    break;\r\n  case 'DELETE_CITY':\r\n    newCities = state.cities.filter(city => city.id !== action.payload);\r\n    state = {\r\n      ...state,\r\n      cities: newCities\r\n    };\r\n    break;\r\n  case 'FETCH_ADDED_CITY_SUCCESS':\r\n    newCities = state.cities.filter(city => city.id !== action.payload);\r\n    state = {\r\n      ...state,\r\n      cities: newCities\r\n    };\r\n    newCities = [...state.cities, action.payload];\r\n    state = {\r\n      ...state,\r\n      cities: newCities\r\n    };\r\n    break;\r\n  case 'FETCH_ADDED_CITY_ERROR':\r\n    state = {\r\n      error: action.payload.error\r\n    };\r\n    newCities = state.cities.filter(city => city.id !== action.payload);\r\n    state = {\r\n      ...state,\r\n      cities: newCities\r\n    };\r\n    break;\r\n  default:\r\n    break;\r\n}\r\n\r\nreturn state;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}