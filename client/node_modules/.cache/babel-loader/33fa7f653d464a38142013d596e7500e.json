{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Jully\\\\ClientServerWeather\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getCitiesFromStore } from \"../index\";\nexport default function citiesReducer(currentState = {\n  cities: getCitiesFromStore()\n}, action) {\n  let tem = getCitiesFromStore().then(json => console.log(json));\n  console.log(currentState.cities);\n\n  let state = _objectSpread({}, currentState, {\n    error: false,\n    cities: new Map(currentState.cities)\n  });\n\n  switch (action.type) {\n    case 'ADD_CITY':\n      if (!state.cities.has(action.payload)) state.cities.set(action.payload);\n      break;\n\n    case 'DELETE_CITY':\n      state.cities.delete(action.payload);\n      break;\n\n    case 'FETCH_ADDED_CITY_SUCCESS':\n      state.cities.delete(action.payload.city);\n      state.cities.set(action.payload.response.name, action.payload.response);\n      break;\n\n    case 'FETCH_ADDED_CITY_ERROR':\n      state.error = action.payload.error;\n      state.cities.delete(action.payload.city);\n      break;\n\n    default:\n      break;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["C:/Users/Jully/ClientServerWeather/client/src/reducers/сitiesReducer.js"],"names":["getCitiesFromStore","citiesReducer","currentState","cities","action","tem","then","json","console","log","state","error","Map","type","has","payload","set","delete","city","response","name"],"mappings":";;;;;;AAAA,SAASA,kBAAT,QAAmC,UAAnC;AAEA,eAAe,SAASC,aAAT,CAAuBC,YAAY,GAAG;AAACC,EAAAA,MAAM,EAAEH,kBAAkB;AAA3B,CAAtC,EAAsEI,MAAtE,EAA8E;AAE3F,MAAIC,GAAG,GAAGL,kBAAkB,GACzBM,IADO,CACFC,IAAI,IACZC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAFU,CAAV;AAIFC,EAAAA,OAAO,CAACC,GAAR,CAAYP,YAAY,CAACC,MAAzB;;AAEE,MAAIO,KAAK,qBACJR,YADI;AAEPS,IAAAA,KAAK,EAAE,KAFA;AAGPR,IAAAA,MAAM,EAAE,IAAIS,GAAJ,CAAQV,YAAY,CAACC,MAArB;AAHD,IAAT;;AAQA,UAAQC,MAAM,CAACS,IAAf;AACE,SAAK,UAAL;AACE,UAAI,CAACH,KAAK,CAACP,MAAN,CAAaW,GAAb,CAAiBV,MAAM,CAACW,OAAxB,CAAL,EACEL,KAAK,CAACP,MAAN,CAAaa,GAAb,CAAiBZ,MAAM,CAACW,OAAxB;AACF;;AACF,SAAK,aAAL;AACEL,MAAAA,KAAK,CAACP,MAAN,CAAac,MAAb,CAAoBb,MAAM,CAACW,OAA3B;AACA;;AACF,SAAK,0BAAL;AACEL,MAAAA,KAAK,CAACP,MAAN,CAAac,MAAb,CAAoBb,MAAM,CAACW,OAAP,CAAeG,IAAnC;AACAR,MAAAA,KAAK,CAACP,MAAN,CAAaa,GAAb,CAAiBZ,MAAM,CAACW,OAAP,CAAeI,QAAf,CAAwBC,IAAzC,EAA+ChB,MAAM,CAACW,OAAP,CAAeI,QAA9D;AACA;;AACF,SAAK,wBAAL;AACET,MAAAA,KAAK,CAACC,KAAN,GAAcP,MAAM,CAACW,OAAP,CAAeJ,KAA7B;AACAD,MAAAA,KAAK,CAACP,MAAN,CAAac,MAAb,CAAoBb,MAAM,CAACW,OAAP,CAAeG,IAAnC;AACA;;AACF;AACE;AAjBJ;;AAmBA,SAAOR,KAAP;AACD","sourcesContent":["import { getCitiesFromStore } from \"../index\";\r\n\r\nexport default function citiesReducer(currentState = {cities: getCitiesFromStore()}, action) {\r\n\r\n  let tem = getCitiesFromStore()\r\n    .then(json =>\r\n  console.log(json));\r\n\r\nconsole.log(currentState.cities);\r\n\r\n  let state = {\r\n    ...currentState,\r\n    error: false,\r\n    cities: new Map(currentState.cities)\r\n  };\r\n\r\n\r\n\r\n  switch (action.type) {\r\n    case 'ADD_CITY':\r\n      if (!state.cities.has(action.payload))\r\n        state.cities.set(action.payload);\r\n      break;\r\n    case 'DELETE_CITY':\r\n      state.cities.delete(action.payload);\r\n      break;\r\n    case 'FETCH_ADDED_CITY_SUCCESS':\r\n      state.cities.delete(action.payload.city);\r\n      state.cities.set(action.payload.response.name, action.payload.response);\r\n      break;\r\n    case 'FETCH_ADDED_CITY_ERROR':\r\n      state.error = action.payload.error;\r\n      state.cities.delete(action.payload.city);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return state;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}