{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Jully\\\\ClientServerWeather\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getCitiesFromStore } from \"../index\";\nexport default function citiesReducer(currentState = {\n  cities: getCitiesFromStore()\n}, action) {\n  let state = _objectSpread({}, currentState, {\n    error: false,\n    cities: new Map(currentState.cities)\n  });\n\n  getCitiesFromStore().then(json => {\n    state = _objectSpread({}, currentState, {\n      error: false,\n      cities: json.map(city => ({\n        id: json._id,\n        nane: json.name\n      }))\n    });\n  });\n\n  switch (action.type) {\n    case 'ADD_CITY':\n      if (!state.cities.has(action.payload)) state.cities.set(action.payload);\n      break;\n\n    case 'DELETE_CITY':\n      state.cities.delete(action.payload);\n      break;\n\n    case 'FETCH_ADDED_CITY_SUCCESS':\n      state.cities.delete(action.payload.city);\n      state.cities.set(action.payload.response.name, action.payload.response);\n      break;\n\n    case 'FETCH_ADDED_CITY_ERROR':\n      state.error = action.payload.error;\n      state.cities.delete(action.payload.city);\n      break;\n\n    default:\n      break;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["C:/Users/Jully/ClientServerWeather/client/src/reducers/сitiesReducer.js"],"names":["getCitiesFromStore","citiesReducer","currentState","cities","action","state","error","Map","then","json","map","city","id","_id","nane","name","type","has","payload","set","delete","response"],"mappings":";;;;;;AAAA,SAASA,kBAAT,QAAmC,UAAnC;AAEA,eAAe,SAASC,aAAT,CAAuBC,YAAY,GAAG;AAACC,EAAAA,MAAM,EAAEH,kBAAkB;AAA3B,CAAtC,EAAsEI,MAAtE,EAA8E;AAE7F,MAAIC,KAAK,qBACJH,YADI;AAEPI,IAAAA,KAAK,EAAE,KAFA;AAGPH,IAAAA,MAAM,EAAE,IAAII,GAAJ,CAAQL,YAAY,CAACC,MAArB;AAHD,IAAT;;AAMAH,EAAAA,kBAAkB,GACfQ,IADH,CACQC,IAAI,IAAI;AACdJ,IAAAA,KAAK,qBACAH,YADA;AAEHI,MAAAA,KAAK,EAAE,KAFJ;AAGHH,MAAAA,MAAM,EAAEM,IAAI,CAACC,GAAL,CAASC,IAAI,KAClB;AAAEC,QAAAA,EAAE,EAAEH,IAAI,CAACI,GAAX;AAAgBC,QAAAA,IAAI,EAAEL,IAAI,CAACM;AAA3B,OADkB,CAAb;AAHL,MAAL;AAOD,GATD;;AAWA,UAAQX,MAAM,CAACY,IAAf;AACE,SAAK,UAAL;AACE,UAAI,CAACX,KAAK,CAACF,MAAN,CAAac,GAAb,CAAiBb,MAAM,CAACc,OAAxB,CAAL,EACEb,KAAK,CAACF,MAAN,CAAagB,GAAb,CAAiBf,MAAM,CAACc,OAAxB;AACF;;AACF,SAAK,aAAL;AACEb,MAAAA,KAAK,CAACF,MAAN,CAAaiB,MAAb,CAAoBhB,MAAM,CAACc,OAA3B;AACA;;AACF,SAAK,0BAAL;AACEb,MAAAA,KAAK,CAACF,MAAN,CAAaiB,MAAb,CAAoBhB,MAAM,CAACc,OAAP,CAAeP,IAAnC;AACAN,MAAAA,KAAK,CAACF,MAAN,CAAagB,GAAb,CAAiBf,MAAM,CAACc,OAAP,CAAeG,QAAf,CAAwBN,IAAzC,EAA+CX,MAAM,CAACc,OAAP,CAAeG,QAA9D;AACA;;AACF,SAAK,wBAAL;AACEhB,MAAAA,KAAK,CAACC,KAAN,GAAcF,MAAM,CAACc,OAAP,CAAeZ,KAA7B;AACAD,MAAAA,KAAK,CAACF,MAAN,CAAaiB,MAAb,CAAoBhB,MAAM,CAACc,OAAP,CAAeP,IAAnC;AACA;;AACF;AACE;AAjBJ;;AAoBA,SAAON,KAAP;AACC","sourcesContent":["import { getCitiesFromStore } from \"../index\";\r\n\r\nexport default function citiesReducer(currentState = {cities: getCitiesFromStore()}, action) {\r\n\r\nlet state = {\r\n  ...currentState,\r\n  error: false,\r\n  cities: new Map(currentState.cities)\r\n};\r\n\r\ngetCitiesFromStore()\r\n  .then(json => {\r\n  state = {\r\n    ...currentState,\r\n    error: false,\r\n    cities: json.map(city =>\r\n      ({ id: json._id, nane: json.name})\r\n    )\r\n  };\r\n})\r\n\r\nswitch (action.type) {\r\n  case 'ADD_CITY':\r\n    if (!state.cities.has(action.payload))\r\n      state.cities.set(action.payload);\r\n    break;\r\n  case 'DELETE_CITY':\r\n    state.cities.delete(action.payload);\r\n    break;\r\n  case 'FETCH_ADDED_CITY_SUCCESS':\r\n    state.cities.delete(action.payload.city);\r\n    state.cities.set(action.payload.response.name, action.payload.response);\r\n    break;\r\n  case 'FETCH_ADDED_CITY_ERROR':\r\n    state.error = action.payload.error;\r\n    state.cities.delete(action.payload.city);\r\n    break;\r\n  default:\r\n    break;\r\n}\r\n\r\nreturn state;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}