{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jully\\\\ClientServerWeather\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport geoReducer from './reducers/geoReducer';\nimport сitiesReducer from './reducers/сitiesReducer';\nimport thunk from \"redux-thunk\";\nconst store = createStore(combineReducers({\n  geo: geoReducer,\n  fav_cities: сitiesReducer\n}), applyMiddleware(thunk));\n/*storeWeather.subscribe(() => {\r\n  localStorage.setItem('cities', JSON.stringify([...storeWeather.getState().fav_cities.cities.keys()]));\r\n});*/\n\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n})), document.getElementById('root'));\nexport default function getCitiesFromStorage() {\n  const localValue = localStorage.getItem('cities');\n  const localStorageContent = JSON.parse(localValue);\n  let cities = [];\n\n  if (localStorageContent !== null && Array.isArray(localStorageContent)) {\n    cities = localStorageContent;\n  }\n\n  return new Map(cities.map(city => [city]));\n}\nserviceWorker.unregister();","map":{"version":3,"sources":["C:/Users/Jully/ClientServerWeather/client/src/index.js"],"names":["React","ReactDOM","Provider","App","serviceWorker","createStore","combineReducers","applyMiddleware","geoReducer","сitiesReducer","thunk","store","geo","fav_cities","render","document","getElementById","getCitiesFromStorage","localValue","localStorage","getItem","localStorageContent","JSON","parse","cities","Array","isArray","Map","map","city","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,KAAK,GAAGN,WAAW,CAAEC,eAAe,CAAC;AAC3CM,EAAAA,GAAG,EAAGJ,UADqC;AAE3CK,EAAAA,UAAU,EAAGJ;AAF8B,CAAD,CAAjB,EAGtBF,eAAe,CAACG,KAAD,CAHO,CAAzB;AAKA;;;;AAIAT,QAAQ,CAACa,MAAT,CACA,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAIH,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADA,EAGaI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAHb;AAKA,eAAe,SAASC,oBAAT,GAAgC;AAC7C,QAAMC,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAnB;AACA,QAAMC,mBAAmB,GAAGC,IAAI,CAACC,KAAL,CAAWL,UAAX,CAA5B;AACA,MAAIM,MAAM,GAAG,EAAb;;AACA,MAAIH,mBAAmB,KAAK,IAAxB,IAAgCI,KAAK,CAACC,OAAN,CAAcL,mBAAd,CAApC,EAAwE;AACtEG,IAAAA,MAAM,GAAGH,mBAAT;AACD;;AACD,SAAO,IAAIM,GAAJ,CAAQH,MAAM,CAACI,GAAP,CAAWC,IAAI,IAAI,CAACA,IAAD,CAAnB,CAAR,CAAP;AACC;AAEHzB,aAAa,CAAC0B,UAAd","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport geoReducer from './reducers/geoReducer';\r\nimport сitiesReducer from './reducers/сitiesReducer';\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore (combineReducers({\r\ngeo : geoReducer,\r\nfav_cities : сitiesReducer,\r\n}),applyMiddleware(thunk));\r\n\r\n/*storeWeather.subscribe(() => {\r\n  localStorage.setItem('cities', JSON.stringify([...storeWeather.getState().fav_cities.cities.keys()]));\r\n});*/\r\n\r\nReactDOM.render(\r\n<Provider store = {store}>\r\n  <App />\r\n</Provider>, document.getElementById('root'));\r\n\r\nexport default function getCitiesFromStorage() {\r\n  const localValue = localStorage.getItem('cities');\r\n  const localStorageContent = JSON.parse(localValue);\r\n  let cities = [];\r\n  if (localStorageContent !== null && Array.isArray(localStorageContent)) {\r\n    cities = localStorageContent;\r\n  }\r\n  return new Map(cities.map(city => [city]));\r\n  }\r\n\r\nserviceWorker.unregister();\r\n"]},"metadata":{},"sourceType":"module"}